####################
### Preparations ###
####################

### Generates Occurrence Counts ####
fix_S=4;
### Fetch Functions ###
include("../Codebase/basic_analysis.jl")
include("../Codebase/file_management.jl")
include("../Codebase/utility.jl")
include("../Codebase/basic_plotting.jl")
include("../Codebase/models.jl")
include("../Codebase/model_simulation.jl")
include("../Codebase/behaviour_grid_loading.jl")
include("../Codebase/behaviour_grid_plotting.jl")



# Fetch packages.
using Plots, Plots.Measures
using BifurcationKit
using DelimitedFiles
using MAT
using Plots



# Sets other values.
const mm = Plots.mm
p0_gr = let
    gr()
    plot(xticks=[],yticks=[],foreground_color_border=:white)
end
p0 = let
    gr()
    # pythonplot()
    plot(xticks=[],yticks=[],foreground_color_border=:white)
end
gr()
# Plots the activations of a monte carlo assemble of trajectories.
plot_activations_cs(args...;kwargs...) = (plot(); plot_activations_cs!(args...;kwargs...);)
# plot_activations_cs(args...;kwargs...) = (plot(); plot_activations_cs!(args...;kwargs...))

function plot_activations_cs!(p_vals::Vector{Float64}, t_vals::Tuple{Float64,Float64,Float64}, n::Int64; model=model3, ymax=Inf, lw=4, la=0.6, colors=make_blue_scale(n; matrix_form=true), activation_lw=7, activation_la=0.8, xticks=[], yticks=[], saveat=0.05, adaptive=false, dt=0.0025, maxiters=1e6, xguide="Time", yguide="Concentration", gillespie=false, plot_nc_minmaxes=false, lw_nc_mm=1.0, la_nc_mm=0.9, kwargs...)
    sols = gillespie ? 
        ssa_monte_activation(p_vals, (t_vals[1],t_vals[3]), t_vals[2], n; saveat=saveat) : 
        cle_monte_activation(p_vals, (t_vals[1],t_vals[3]), t_vals[2], n; model=model, saveat=saveat, adaptive=adaptive, dt=dt, maxiters=maxiters)
    plts=plot!(sols; idxs=1, color=colors, la=la, lw=lw, xticks=:auto, yticks=:auto, xguide="Time in [au]", yguide="Activation", label="", ylimit=(0.,ymax), kwargs...)
    # plot!(sols; idxs=1, color=colors, la=la, lw=lw, xticks=:auto, yticks=:auto, xguide="Time in [au]", yguide="Activation", label="", ylimit=(0.,ymax), kwargs...)
    plot_nc_minmaxes && plot_nc_min_maxes!(p_vals, (t_vals[1],t_vals[3]); model=model, lw=lw_nc_mm, la=la_nc_mm)
    plot_vertical_line!(0,(ymax==Inf ? 1.05*maximum(first.(vcat(getfield.(sols.u,:u)...))) : max(ymax,1.05*maximum(first.(vcat(getfield.(sols.u,:u)...))))),lw=activation_lw,la=activation_la,left_margin=5mm,xlimit=(t_vals[1],t_vals[3]))
    return plts, sols
end

function ensemble_to_matrix(sols::EnsembleSolution)
    # Number of trajectories (ensemble members)
    num_trajectories = length(sols)
    
    # Extract the first solution to determine the size (num of time points, num of states)
    first_sol = sols[1]
    num_time_points = length(first_sol.u)   # Time points
    num_states = length(first_sol.u[1])     # Number of states at each time point (assuming u is a vector)
    
    # Create a 3D array: (time points, states, ensemble members)
    trajectory_matrix = zeros(Float64, num_time_points, num_states, num_trajectories+1)
    
    # Loop over each ensemble member and extract the trajectory
    trajectory_matrix[:,1,1]=sols[1].t
    for i in 1:num_trajectories
        sol = sols[i]
        for t in 1:num_time_points
            trajectory_matrix[t, :, i+1] = sol.u[t]  # Set the trajectory for all states at time point t
        end
    end
    
    return trajectory_matrix
end





### Behaviour Map Parameters ###
S_grid = 10 .^(range(-1,stop=2,length=300))
D_grid = 10 .^(range(-1,stop=2,length=300))
τ_grid = [0.1,0.15,0.20,0.30,0.50,0.75,1.0,1.5,2.0,3.0,5.0,7.50,10.0,15.0,20.0,30.0,50.0,75.0,100.0]
v0_grid = [0.01,0.02,0.03,0.05,0.075,0.1,0.15,0.20]
n_grid = [2.0,3.0,4.0]
η_grid = [0.001,0.002,0.005,0.01,0.02,0.05,0.1]

target_folder = "BehaviourMap"
dataset = DataSet(target_folder,S_grid,D_grid,τ_grid,v0_grid,n_grid,η_grid);


### Plot Settings ###

# Default values.
gr()
default(fmt = :png, framestyle=:box, grid=false, xguidefontsize=16, yguidefontsize=16, titlefontsize=18);

# Sets colour scales.
red_scale = make_red_scale(4);
bluegreen_scale = make_bluegreen_scale(4);
blue_scale= make_blue_scale(3);


####################
### Make Figure ####
####################

# Make behaviour grid plot.
#params = [2.0,0.05,3,0.1]; #(τ, v0, n, η)
# params = [0.2,0.01,3,0.05];
params = [0.2,0.01,2,0.05];

bg = BehaviourGrid(params,dataset);
plot_behaviour_grid(bg,start_s_slice=100,idx_axis=false,xguide="D",yguide="S")


#Setting Plotting params
# layout = @layout grid(length(nu_val),length(tau_val))

#samples = [
 #   (0.2, 1.5),(0.2, 2.3),(0.2, 3.0),(0.2, 6.5),
    # (1.5, 3.0),
    # (3.5, 3.0),(3.5, 6.5),
    # (10.0, 1.5),(10.0, 3.0),(10.0, 6.5),(10.0, 19.0),(10.0, 85.0),
    # (60.0, 3.0),(60.0, 6.5),(60.0, 19.0),(60.0, 85.0)
#]

samples = [
    (0.1, fix_S),(0.2, fix_S),(0.5, fix_S),
    (1, fix_S),(2, fix_S),(3, fix_S),
    (4, fix_S),(5, fix_S),(6, fix_S),(7, fix_S),(8, fix_S),
    (9, fix_S),(10, fix_S),(15, fix_S),
    (20, fix_S),(50, fix_S)
]
#savefig("plot.png")

#Setting Plotting params
layout = @layout grid(1,length(samples))

sample_idxs = [(findfirst(D_grid .> pos[1]), findfirst(S_grid .> pos[2]) - 100) for pos in samples]
behaviour_plot = scatter!(sample_idxs,label="",color=:white,xlimit=(-Inf,Inf),ylimit=(-Inf,Inf),markersize=3)
#savefig("plot.png")


# Make simulation plots.
make_p(ps, sample) = [sample[2]; sample[1]; ps]
sample_ps = [make_p(params, sample) for sample in samples]
display(behaviour_plot)
# savefig("test.png")
savefig("plot.png")

lw = 3
t_pts = (-50.0, 0.0, 250.0)
ymax = 1.35;
# plots = [plot_activation(p, t_pts; idxs = [1], ymax=ymax, lw=lw, xguide="", yguide="", saveat=0.2) for p in sample_ps]

# plots = [plot_activation(p, t_pts,10; ymax=ymax, lw=lw, xguide="", yguide="", saveat=0.2) for p in sample_ps]

#plots=  [plot_activations_cs(p, t_pts, 10; ymax=ymax, lw=lw, xguide="Time", yguide="fuckoff", saveat=0.2) for p in sample_ps]

for i in 1:length(sample_ps)
#for i in 1
    plots,sols =plot_activations_cs(sample_ps[i], t_pts, 10; ymax=ymax, lw=lw, xguide="Time", yguide="fuckoff", saveat=0.2)
    traces= ensemble_to_matrix(sols)
    matwrite("../Simulation_Data/S_"*string(sample_ps[i][1])*
    "-D_"*string(sample_ps[i][2])*
    "-tau_"*string(sample_ps[i][3])*
    "-v0_"*string(sample_ps[i][4])*
    "-n_"*string(sample_ps[i][5])*
    "-nu_"*string(sample_ps[i][6])*
    ".mat", Dict("traces" => traces))
end
    #plots,sols =[plot_activations_cs(p, t_pts, 10; ymax=ymax, lw=lw, xguide="Time", yguide="fuckoff", saveat=0.2) for p in sample_ps]
#(τ, v0, n, η)
#plot_activations_cs!(p_vals::Vector{Float64}, t_vals::Tuple{Float64,Float64,Float64}, n::Int64; model=model3, ymax=Inf, lw=4, la=0.6, colors=make_blue_scale(n; matrix_form=true), activation_lw=7, activation_la=0.8, xticks=[], yticks=[], saveat=0.05, adaptive=false, dt=0.0025, maxiters=1e6, xguide="Time", yguide="Concentration", gillespie=false, plot_nc_minmaxes=false, lw_nc_mm=1.0, la_nc_mm=0.9, kwargs...)

#traces= ensemble_to_matrix(sols)

#writedlm("../Simulation_Data/test1.csv",aa,",")

#matwrite("../Simulation_Data/test1.mat", Dict("aa" => aa))

# for i in 1:length(sample_ps)
#     plots[i]= plot_activations(sample_ps[i], t_pts, 10; ymax=ymax, lw=lw, xguide="", yguide="", saveat=0.2)
# end


#Making Plot
plot_now=plot(plots..., layout = layout, size=(1500, 600))
display(plot_now)

# plot_simulations(sample_ps[1], (0.0, t_pts[3]),3; u0=[0.85, 0.85, 0.85, 0.85], ymax=ymax, color=blue_scale[1], la=0.8, lw=lw, saveat=0.2)

# # plot_simulations(args...;kwargs...) = (plot(); plot_simulations!(args...;kwargs...);)
# # function plot_simulations!(p_vals::Vector{Float64}, tspan::Tuple{Float64,Float64}, n; model=model3, saveat=0.1, maxiters=1e6, adaptive=false, dt=0.0025, ymax=Inf, color=:darkblue, lw=4, la=0.6, colors=fill(color,1,n), lws=fill(lw,1,n), las=fill(la,1,n), xticks=[], yticks=[], xguide="Time", yguide="Concentration", gillespie=false, kwargs...)
# #     sols = gillespie ? ssamonte(p_vals, tspan, n; saveat=saveat) : monte(p_vals, tspan, n; model=model, saveat=saveat, maxiters=maxiters, adaptive=adaptive, dt=dt, kwargs...)
# #     plot!(sols, idxs=1, color=colors, la=las, lw=lws, xticks=xticks, yticks=yticks, xguide=xguide, yguide=yguide, label="", ylimit=(0.,ymax), left_margin=5mm, xlimit=tspan)
# # end

# # plot_simulation(args...;kwargs...) = (plot(); plot_simulation!(args...;kwargs...);)
# # function plot_simulation!(p_vals::Vector{Float64}, tspan::Tuple{Float64,Float64}; model=model3, saveat=0.1,maxiters=1e6, adaptive=false, dt=0.0025, ymax=Inf, idxs=[1], color=:darkblue, lw=4, la=0.6, colors=fill(color,1,length(idxs)), lws=fill(lw,1,length(idxs)), las=fill(la,1,length(idxs)), xticks=[], yticks=[], legendfontsize=11, plot_labels=false, xguide="Time",yguide="Concentration", gillespie=false, kwargs...)
# #     sol = gillespie ? ssa_sim(p_vals,tspan;saveat=saveat,kwargs...) : cle_sim(p_vals, tspan; model=model, saveat=saveat, maxiters=maxiters, adaptive=adaptive, dt=dt, kwargs...)
# #     plot!(sol, idxs=idxs, color=colors, la=las, lw=lws, xticks=xticks, yticks=yticks, xguide=xguide, yguide=yguide, label="", ylimit=(0.,ymax))
# #     if plot_labels
# #         foreach((i,var) -> plot!([],[],label="$(model.states[var].val.f)",color=colors[i],lw=lws[i],la=las[i]), enumerate(idxs))
# #         plot!(legendfontsize=legendfontsize,legend=:topleft)
# #     end
# #     plot!(left_margin=5mm,xlimit=tspan)
# # end


# # Handles special case: Heterogeneous activation.
#  i = 9
#  plots[i] = plot_activations(sample_ps[i], t_pts, 10; ymax=ymax, lw=lw, xguide="", yguide="", saveat=0.2)

# # Handles special case: Stable bistability.
# i = 2
# plot_simulation(sample_ps[i], (0.0, t_pts[3]); u0=[0.85, 0.85, 0.85, 0.85], ymax=ymax, color=blue_scale[1], la=0.8, lw=lw, saveat=0.2)
# plots[2] = plot_activation!(sample_ps[i], t_pts; idxs = [1], ymax=ymax, color=blue_scale[2], la=0.8, lw=lw, xguide="", yguide="", saveat=0.2)

# # Make combined plot.
# reordered_plots = [
#     plots[5], plots[11], plots[10], plots[12], plots[16], 
#     plots[4], plots[3], plots[2], 
#     plots[15], plots[14], plots[13], 
#     plots[1], plots[7], plots[6], plots[8], plots[9]]
# annotated_behaviour_map = plot(reordered_plots[1:8]...,behaviour_plot, reordered_plots[9:16]...; 
#      size = (2000,1200), layout = @layout [grid(1,5){0.2h}; [[a; b; c{0.28h}] d{0.595w} [e; f; g{0.28h}]]; grid(1,5){0.2h}])

# # Make extra behaviour grid plots.

# bg2 = BehaviourGrid([0.3,0.05,3,0.1], dataset);
# bg_plot_2 = plot_behaviour_grid(bg2,start_s_slice=100,idx_axis=false,xguide="",yguide="",xticks=[],yticks=[])
# bg_plot_2 = plot!(bg_plot_2, top_margin=20mm, left_margin=2mm)

# bg3 = BehaviourGrid([2.0,0.2,3,0.1], dataset);
# bg_plot_3 = plot_behaviour_grid(bg3,start_s_slice=100,idx_axis=false,xguide="",yguide="",xticks=[],yticks=[])
# bg_plot_3 = plot!(bg_plot_3, top_margin=20mm, left_margin=2mm)

# bg4 = BehaviourGrid([2.0,0.05,3,0.02], dataset);
# bg_plot_4 = plot_behaviour_grid(bg4,start_s_slice=100,idx_axis=false,xguide="",yguide="",xticks=[],yticks=[])
# bg_plot_4 = plot!(bg_plot_4, top_margin=20mm, left_margin=2mm)

# bg5 = BehaviourGrid([2.0,0.2,3,0.01], dataset);
# bg_plot_5 = plot_behaviour_grid(bg5,start_s_slice=100,idx_axis=false,xguide="",yguide="",xticks=[],yticks=[])
# bg_plot_5 = plot!(bg_plot_5, top_margin=20mm, left_margin=2mm)

# figure_3_full = plot(annotated_behaviour_map, bg_plot_2, bg_plot_3, bg_plot_4, bg_plot_5; size = (2000,1700), layout = @layout [a{0.77h}; grid(1,4)])

# # Save plot.
# make_figure(figure_3_full, "Figure_3")